import { getDB } from "./db.js";

// ===== ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô XSS ‡πÄ‡∏ß‡∏•‡∏≤ render raw data =====
function escapeHTML(str) {
    return str.replace(/[&<>'"]/g, c =>
        ({ '&': '&amp;', '<': '&lt;', '>': '&gt;', "'": '&#39;', '"': '&quot;' }[c])
    );
}

// ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ï‡∏≤‡∏£‡∏≤‡∏á =====
function renderTable(title, dataArray) {
    const container = document.createElement("section");
    container.className = "border border-slate-200 rounded-lg shadow-sm p-4 bg-white";

    container.innerHTML = `
    <h3 class="text-lg font-semibold text-slate-700 mb-2">${title}</h3>
    ${dataArray.length === 0
            ? `<div class="text-slate-400 text-sm mb-4">‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</div>`
            : `<div class="overflow-x-auto border border-slate-200 rounded-lg shadow-sm mb-4">
            <table class="min-w-full border-collapse text-sm">
              <thead>
                <tr>${Object.keys(dataArray[0])
                .map(k => `<th class="bg-slate-100 border border-slate-200 px-3 py-2 text-left">${k}</th>`)
                .join("")}</tr>
              </thead>
              <tbody>
                ${dataArray
                .map(row => `
                    <tr class="hover:bg-slate-50">
                      ${Object.values(row)
                        .map(v => `<td class="border border-slate-200 px-3 py-2">${escapeHTML(String(v))}</td>`)
                        .join("")}
                    </tr>
                  `)
                .join("")}
              </tbody>
            </table>
          </div>`
        }
  `;
    return container;
}

// ===== ‡πÅ‡∏™‡∏î‡∏á Database =====
async function showDatabase() {
    const dbContainer = document.getElementById("db-container");
    if (!dbContainer) return;

    try {
        const db = await getDB();
        console.log("üì¶ Internal DB loaded:", db);
        for (const [tableName, rows] of Object.entries(db)) {
            dbContainer.appendChild(renderTable(tableName, rows));
        }
    } catch (err) {
        console.error("‚ùå Error loading DB:", err);
        dbContainer.innerHTML = `<div class="text-red-500 font-medium">‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ (${err.message})</div>`;
    }
}

// ===== ‡πÅ‡∏™‡∏î‡∏á Popup ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π Database =====
async function askPassword() {
    const { value: password } = await Swal.fire({
        title: "üîê ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
        input: "password",
        inputLabel: "‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô",
        inputPlaceholder: "‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô...",
        confirmButtonText: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
        showCancelButton: true,
        cancelButtonText: "‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å",
        allowOutsideClick: false,
        backdrop: true,
        inputAttributes: {
            maxlength: 32,
            autocapitalize: "off",
            autocorrect: "off"
        }
    });

    if (!password) {
        await Swal.fire("‚ùå ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á", "‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™", "error");
        return false;
    }

    // ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏´‡∏±‡∏™‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ (‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÑ‡∏î‡πâ)
    const ADMIN_PASS = "1234"; // ‚Üê ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏à‡∏£‡∏¥‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    if (password === ADMIN_PASS) {
        await Swal.fire("‚úÖ ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö", "success");
        return true;
    } else {
        await Swal.fire("üö´ ‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "‡πÇ‡∏õ‡∏£‡∏î‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á", "error");
        return false;
    }
}

// ===== ‡∏õ‡∏∏‡πà‡∏° Clear Database =====
function setupClearButton() {
    const clearBtn = document.getElementById("clearBtn");
    clearBtn.addEventListener("click", async () => {
        const confirmClear = confirm("‚ö†Ô∏è ‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î?");
        if (!confirmClear) return;

        // ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ localStorage ‚Üí ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á
        if (localStorage.getItem("mockDB")) {
            localStorage.removeItem("mockDB");
            alert("üßπ ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≥‡∏•‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢");
        }

        // ‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å db.json
        await renderDatabase();
    });
}

// ===== ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÇ‡∏´‡∏•‡∏î component ‡∏ô‡∏µ‡πâ =====
(async () => {
    const granted = await askPassword();
    setupClearButton();
    if (granted) showDatabase();
})();
